{
	"info": {
		"_postman_id": "5b32f6fa-23af-4b0f-bb31-8a863bd11504",
		"name": "Ride Booking System",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36126938"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ashrdaful@ssddsssx.com\",\n    \"password\": \"Ashraful@ashraful.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/auth/login",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "## Login Endpoint\n\nThis endpoint allows users to authenticate and log in to the application. Upon successful authentication, the server responds with user details and a status message.\n\n### Request\n\n- **Method**: POST\n    \n- **URL**: `{{baseURL}}/api/auth/login`\n    \n- **Request Body**: The request should be sent as a JSON object with the following parameters:\n    \n    - **email** (string): The email address of the user attempting to log in.\n        \n    - **password** (string): The password associated with the user's account.\n        \n\n#### Example Request Body\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"your_password\"\n}\n\n ```\n\n### Response\n\n- **Status Code**: 202 (Accepted)\n    \n- **Content-Type**: application/json\n    \n- **Response Body**: The response will contain a JSON object with the following structure:\n    \n    - **message** (string): A message regarding the login attempt (may be empty).\n        \n    - **statusCode** (integer): The status code indicating the result of the operation.\n        \n    - **data** (object): Contains user information:\n        \n        - **email** (string): The email of the logged-in user.\n            \n        - **userId** (string): The unique identifier for the user.\n            \n        - **user** (object): Detailed information about the user:\n            \n            - **_id** (string): The unique ID of the user.\n                \n            - **name** (string): The name of the user.\n                \n            - **email** (string): The email of the user.\n                \n            - **role** (string): The role of the user in the application.\n                \n            - **isBlocked** (boolean): Indicates if the user account is blocked.\n                \n            - **isOnline** (boolean): Indicates if the user is currently online.\n                \n            - **driver** (object or null): Driver-related information (if applicable).\n                \n            - **vehicleInfo** (object or null): Vehicle information (if applicable).\n                \n            - **ridings** (array): An array of past riding records.\n                \n            - **lastOnlineAt** (string): Timestamp of the last time the user was online.\n                \n            - **createdAt** (string): Timestamp of when the user account was created.\n                \n            - **updatedAt** (string): Timestamp of the last update to the user account.\n                \n            - **username** (string): The username of the user.\n                \n            - **location** (object): The location details of the user:\n                \n                - **type** (string): The type of location.\n                    \n                - **coordinates** (array): An array containing the coordinates of the location.\n                    \n                - **address** (string): The address of the user.\n                    \n                - **_id** (string): The unique ID for the location.\n                    \n            - **id** (string): Another identifier for the user.\n                \n\n### Notes\n\n- Ensure that the email and password provided are correct to avoid authentication errors.\n    \n- The response may vary based on the user's account status (e.g., blocked or online)."
					},
					"response": []
				},
				{
					"name": "refresh token",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ashrafula\",\n    \"email\": \"rider@ashraful.com\",\n    \"password\": \"Ashraful@ashraful.com\",\n    \"role\": \"rider\"\n}"
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/auth/refresh-token",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"auth",
								"refresh-token"
							]
						},
						"description": "## Refresh Token Endpoint\n\nThis endpoint is used to refresh the authentication tokens for a user. It allows the user to obtain a new access token and refresh token by providing their credentials.\n\n### Request\n\n- **Method:** POST\n    \n- **URL:** `{{baseURL}}/api/auth/refresh-token`\n    \n- **Content-Type:** application/json\n    \n\n#### Request Body\n\nThe request body must be a JSON object containing the following parameters:\n\n| Parameter | Type | Description |\n| --- | --- | --- |\n| name | string | The name of the user. |\n| email | string | The email address of the user. |\n| password | string | The password of the user. |\n| role | string | The role of the user (e.g., rider). |\n\n**Example Request Body:**\n\n``` json\n{\n  \"name\": \"exampleName\",\n  \"email\": \"example@example.com\",\n  \"password\": \"examplePassword\",\n  \"role\": \"exampleRole\"\n}\n\n ```\n\n### Response\n\nOn a successful request, the server will respond with a status code of 201 and a JSON object containing the following fields:\n\n| Field | Type | Description |\n| --- | --- | --- |\n| message | string | A message indicating the result of the request (may be empty). |\n| statusCode | number | The status code of the response (0 indicates success). |\n| data | object | An object containing the new tokens. |\n| data.accessToken | string | The newly generated access token. |\n| data.refreshToken | string | The newly generated refresh token. |\n\n**Example Response:**\n\n``` json\n{\n  \"message\": \"\",\n  \"statusCode\": 0,\n  \"data\": {\n    \"accessToken\": \"newAccessTokenValue\",\n    \"refreshToken\": \"newRefreshTokenValue\"\n  }\n}\n\n ```\n\nEnsure that the request body is properly formatted and includes all required fields to receive the expected response."
					},
					"response": []
				},
				{
					"name": "logout",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ashraful@ashraful.com\",\n    \"password\": \"Ashraful@ashraful.com\"\n}"
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/auth/logout",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ashraful\",\n    \"email\": \"ashrafsulaa@adminasaa.com\",\n    \"password\": \"Ashraful@ashraful.com\",\n    \"role\": \"driver\",\n    \"vehicleInfo\": {\n        \"license\": \"123412\",\n        \"model\": \"423423423\",\n        \"plateNumber\": \"d23sdaasd3a5\"\n     }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/user/create",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user info",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ashraful\",\n    \"email\": \"ashraful@driver.com\",\n    \"password\": \"Ashraful@ashraful.com\",\n    \"role\": \"driver\",\n    \"vehivleInfo\": {\n        \"plateNumber\" : \"dsjkhf\",\n        \"model\": \"dfdsf\",\n        \"license\": \"fdfs\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/user/me",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"user",
								"me"
							]
						},
						"description": "### Get User Information\n\nThis endpoint retrieves the information of the currently authenticated user. It is a `GET` request to the `/api/user/me` endpoint.\n\n#### Request Parameters\n\nThis endpoint does not require any additional parameters in the request URL. The authentication is handled via the session or token used when making the request.\n\n#### Expected Response\n\nUpon a successful request, the server will respond with a JSON object containing the user's details, including but not limited to:\n\n- `name`: The name of the user.\n    \n- `email`: The email address of the user.\n    \n- `role`: The role assigned to the user (e.g., driver).\n    \n- `vehicleInfo`: An object containing details about the user's vehicle, which includes:\n    \n    - `plateNumber`: The vehicle's plate number.\n        \n    - `model`: The model of the vehicle.\n        \n    - `license`: The license information of the vehicle.\n        \n\n#### Notes\n\n- Ensure that the user is authenticated before making this request.\n    \n- The response will provide the current user's information based on the authentication context.\n    \n- Any changes to the user's information should be made through the appropriate update endpoints."
					},
					"response": []
				},
				{
					"name": "update user by id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"chamnfged\",\n     \"username\": \"ashraful@rider.com-riderss\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/user/update-user/688d0dc67068c944a92bb62a",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"user",
								"update-user",
								"688d0dc67068c944a92bb62a"
							]
						},
						"description": "### Update User Information\n\nThis endpoint allows you to update the details of a specific user in the system. You can modify the user's name and username by sending a PATCH request to the specified URL.\n\n#### Request\n\n- **Method:** PATCH\n    \n- **Endpoint:** `{{baseURL}}/api/user/update-user/{userId}`\n    \n- **Path Parameter:**\n    \n    - `userId` (string): The unique identifier of the user you wish to update.\n        \n\n#### Request Body\n\nThe request body must be sent in JSON format and should contain the following parameters:\n\n- `name` (string): The new name of the user.\n    \n- password (string): The new password of the user.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"name\": \"chamnfged\",\n \n}\n\n ```\n\n#### Response\n\nUpon a successful update, the server will respond with a status code indicating the result of the operation. The structure of the response may include:\n\n- `success` (boolean): Indicates whether the update was successful.\n    \n- `message` (string): A message providing additional information about the update.\n    \n- `data` (object): The updated user information, which may include the `userId`, `name`, and `username`.\n    \n\n**Example Response:**\n\n``` json\n{\n  \"success\": true,\n  \"message\": \"User updated successfully.\",\n  \"data\": {\n    \"userId\": \"688d0dc67068c944a92bb62a\",\n    \"name\": \"chamnfged\",\n    \"username\": \"ashraful@rider.com-riderss\"\n  }\n}\n\n ```\n\nMake sure to provide valid data to ensure the update is processed correctly."
					},
					"response": []
				}
			]
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "get all users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/user/all",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"user",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user by id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/user/688d0e457068c944a92bb62d",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"user",
								"688d0e457068c944a92bb62d"
							]
						}
					},
					"response": []
				},
				{
					"name": "get driver by (user) id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/driver/688e2c173e04daaf5932381f",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"driver",
								"688e2c173e04daaf5932381f"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all drivers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/driver/all",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"driver",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "suspend driver by (user) id",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/suspend-driver/688e2c173e04daaf5932381f/rollback",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"suspend-driver",
								"688e2c173e04daaf5932381f",
								"rollback"
							]
						}
					},
					"response": []
				},
				{
					"name": "block driver/user by (user) id",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/block-user/688d198748751aa44b259fec/block",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"block-user",
								"688d198748751aa44b259fec",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "approve toogle for driver by (user) id",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/approve-driver/688d126c6c52827b6922a7d9/approved",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"approve-driver",
								"688d126c6c52827b6922a7d9",
								"approved"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete block user by (user) id",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/delete-blocked-user/688d198748751aa44b259fec",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"delete-blocked-user",
								"688d198748751aa44b259fec"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete a ride",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/ride/688d198848751aa44b259fee",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"ride",
								"688d198848751aa44b259fee"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all rides",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"ashraful\",\n    \"email\": \"ashraful@driver.com\",\n    \"password\": \"Ashraful@ashraful.com\",\n    \"role\": \"driver\",\n    \"vehivleInfo\": {\n        \"plateNumber\" : \"dsjkhf\",\n        \"model\": \"dfdsf\",\n        \"license\": \"fdfs\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/admin/rides",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"admin",
								"rides"
							]
						},
						"description": "## API Endpoint: Get All Rides\n\n### Method\n\n`GET`\n\n### Endpoint\n\n`{{baseURLhttp://localhost:3000}}/api/admin/all-rides`\n\n### Description\n\nThis endpoint retrieves a list of all rides. It is intended for administrative use, allowing administrators to view ride details and associated user information.\n\n### Request Parameters\n\nThis endpoint does not require any query parameters or body payload for the GET request. The request is made without any additional parameters.\n\n### Expected Response\n\nOn a successful request, the API will return a `200 OK` status with a JSON response containing the following structure:\n\n- **message**: A string that may contain additional information about the request.\n    \n- **statusCode**: A numeric code indicating the status of the response.\n    \n- **data**: An object containing:\n    \n    - **data**: An array of ride objects, each containing:\n        \n        - **_id**: Unique identifier for the ride.\n            \n        - **rider**: An object with details about the rider, including:\n            \n            - **_id**, **name**, **email**, **role**, **isBlocked**, **isOnline**, and other relevant fields.\n                \n        - **driver**: An object with details about the driver, including:\n            \n            - **rating**: An object containing average rating and total ratings.\n                \n            - **_id**, **isApproved**, **vehicleInfo**, and other relevant fields.\n                \n        - **pickUpLocation**: An object detailing the pickup location.\n            \n        - **dropOffLocation**: An object detailing the drop-off location.\n            \n        - **fare**: The fare amount for the ride.\n            \n        - **status**: The current status of the ride.\n            \n        - **timestamps**: Various timestamps related to the ride (e.g., requestedAt, acceptedAt, completedAt).\n            \n        - **rating**: An object containing the rider's rating for the ride.\n            \n\n### Response Format\n\nThe response will be in JSON format, structured as described above, providing comprehensive details about each ride and associated users."
					},
					"response": []
				},
				{
					"name": "get ride by id",
					"request": {
						"method": "GET",
						"header": [],
						"description": "### API Endpoint: Retrieve Ride Details\n\n**Method:** GET  \n**Endpoint:** `{{baseURL}}/api/admin/ride/{rideId}`\n\nThis endpoint is used to retrieve detailed information about a specific ride using its unique identifier. The ride ID should be provided in the URL path.\n\n#### URL Parameters\n\n- `rideId` (string): The unique identifier of the ride you want to retrieve.\n    \n\n#### Request Body\n\nThe GET request does not require a body. However, the last call included a payload that may not be relevant for this specific endpoint. For reference, here are the parameters from that payload:\n\n- `name` (string): Name of the user.\n    \n- `email` (string): Email address of the user.\n    \n- `password` (string): Password of the user.\n    \n- `role` (string): Role of the user (e.g., driver).\n    \n- `vehicleInfo` (object): Information about the vehicle, including:\n    \n    - `plateNumber` (string): Vehicle's plate number.\n        \n    - `model` (string): Vehicle model.\n        \n    - `license` (string): Vehicle license.\n        \n\n#### Expected Response\n\nOn a successful request, the server responds with a status code of `200` and a JSON object containing the following structure:\n\n- `message` (string): A message related to the response (may be empty).\n    \n- `statusCode` (integer): The status code of the response.\n    \n- `data` (object): Contains detailed information about the ride, including:\n    \n    - `rider` (object): Information about the rider such as ID, name, email, role, and status.\n        \n    - `driver` (object): Information about the driver including ratings, vehicle info, and status.\n        \n    - `pickUpLocation` (object): Details about the pickup location.\n        \n    - `dropOffLocation` (object): Details about the drop-off location.\n        \n    - `fare` (number): Fare for the ride.\n        \n    - `status` (string): Current status of the ride.\n        \n    - `requestedAt` (string): Timestamp when the ride was requested.\n        \n    - `distanceInKm` (number): Distance of the ride in kilometers.\n        \n    - Additional metadata such as timestamps for creation and updates.\n        \n\nThis endpoint is crucial for administrators to monitor and manage ride details effectively."
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "driver",
			"item": [
				{
					"name": "check ride request",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/check-ride-request",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"check-ride-request"
							]
						}
					},
					"response": [
						{
							"name": "only driver",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURLhttp://localhost:3000}}/api/driver/check-ride-request",
									"host": [
										"{{baseURLhttp://localhost:3000}}"
									],
									"path": [
										"api",
										"driver",
										"check-ride-request"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "cancel ride request by ride id",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/cancel-ride-request/:id",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"cancel-ride-request",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "accept ride request by ride id",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/accept-ride-request/:id",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"accept-ride-request",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ride pick up by ride id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/pick-up/:id",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"pick-up",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ride in transit by ride id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/in-transit/:id",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"in-transit",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ride copmplete by ride id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/complete-ride/:id",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"complete-ride",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update drive vehicle by driver id",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"license\": \"123412\",\n    \"model\": \"modelnaaaaai\",\n    \"plateNumber\": \"2345ds235235\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/driver-update-vehicle/688e2459cad10efa94de92a0",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"driver-update-vehicle",
								"688e2459cad10efa94de92a0"
							]
						}
					},
					"response": []
				},
				{
					"name": "get driver states by (user) id",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/driver/driver-state/688e5e2cec7e8c26f34504a1",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"driver",
								"driver-state",
								"688e5e2cec7e8c26f34504a1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ride",
			"item": [
				{
					"name": "request a ride {auto match best and nearby driver}",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"lat\": 23.81,\n    \"lng\":  90.41\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/ride/request",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"ride",
								"request"
							]
						},
						"description": "## Request Ride API\n\nThis endpoint allows users to request a ride by providing their current geographical location.\n\n### HTTP Method\n\n`POST`\n\n### Endpoint\n\n`{{baseURL}}/api/ride/request`\n\n### Request Parameters\n\nThe request body must be in JSON format and include the following parameters:\n\n- **lat** (number): The latitude of the user's current location.\n    \n- **lng** (number): The longitude of the user's current location.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"lat\": 23.81,\n  \"lng\": 90.41\n}\n\n ```\n\n### Response Format\n\nThe API will respond with a JSON object. The expected response includes:\n\n- **name** (string): A field that may contain the name of the error or success message.\n    \n- **message** (string): A descriptive message regarding the success or failure of the request.\n    \n- **status** (number): A status code indicating the result of the request.\n    \n- **success** (boolean): A flag indicating whether the request was successful or not.\n    \n\n#### Example Response\n\n``` json\n{\n  \"name\": \"\",\n  \"message\": \"\",\n  \"status\": 0,\n  \"success\": true\n}\n\n ```\n\n### Status Codes\n\n- **409 Conflict**: This status indicates that the request could not be processed due to a conflict with the current state of the resource.\n    \n\nMake sure to handle the response appropriately based on the success flag and status code returned by the API.\n\nThis endpoint allows users to request a ride by providing their current geographical coordinates.\n\n### HTTP Method\n\n`POST`\n\n### Endpoint\n\n`{{baseURL}}/api/ride/request`\n\n### Request Parameters\n\nThe request body should be sent in JSON format and must include the following parameters:\n\n- **lat** (number): The latitude of the user's current location.\n    \n- **lng** (number): The longitude of the user's current location.\n    \n\n#### Example Request Body\n\n``` json\n{\n  \"lat\": 23.81,\n  \"lng\": 90.41\n}\n\n ```\n\n### Expected Response\n\nUpon a successful request, the API responds with a JSON object. The response includes:\n\n- **name** (string): Typically used for error identification, but may be empty in this case.\n    \n- **message** (string): A message providing additional context, which may also be empty.\n    \n- **status** (number): An integer representing the status of the request.\n    \n- **success** (boolean): Indicates whether the request was processed successfully.\n    \n\n#### Example Response\n\n``` json\n{\n  \"name\": \"\",\n  \"message\": \"\",\n  \"status\": 0,\n  \"success\": true\n}\n\n ```\n\n### Error Handling\n\nIn the event of a conflict (HTTP Status 409), the API will still return a success flag, but the details in the response may indicate the nature of the conflict."
					},
					"response": []
				},
				{
					"name": "rating a ride by (ride) id",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"rating\": 10\n}\n\n// from 1 to 5",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURLhttp://localhost:3000}}/api/ride/rating/688e68156b06b4f29007b22a",
							"host": [
								"{{baseURLhttp://localhost:3000}}"
							],
							"path": [
								"api",
								"ride",
								"rating",
								"688e68156b06b4f29007b22a"
							]
						},
						"description": "## API Endpoint: Rate a Ride\n\nThis endpoint allows users to submit a rating for a specific ride identified by its unique ID. The rating helps in assessing the quality of the ride experience.\n\n### HTTP Method\n\n`POST`\n\n### Request URL\n\n`{{baseURLhttp://localhost:3000}}/api/ride/rating/{rideId}`\n\n### Request Parameters\n\n- **rideId** (Path Parameter): A unique identifier for the ride that is being rated. In this example, the ride ID is `688e7cae61f4a7cb5d060188`.\n    \n\n#### Request Body\n\nThe request body must be in JSON format and should include the following parameter:\n\n- **rating** (Integer, required): A numeric value representing the rating given to the ride. It typically ranges from 1 to 5, where 1 is the lowest and 5 is the highest rating. In the provided example, the rating submitted is `4`.\n    \n\n### Expected Response\n\nUpon successfully submitting the rating, the API will return a response indicating the success of the operation. The response typically includes:\n\n- A confirmation message or status indicating that the rating has been recorded.\n    \n- Additional details may include the updated average rating for the ride or any relevant metadata.\n    \n\n### Notes\n\n- Ensure that the ride ID provided in the URL is valid and corresponds to an existing ride.\n    \n- The rating value should be within the acceptable range to avoid validation errors.\n    \n\nThis endpoint is essential for maintaining the quality of ride services by allowing users to provide feedback through ratings."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseURLhttp://localhost:3000",
			"value": "http://localhost:3000",
			"type": "default"
		},
		{
			"key": "baseURL",
			"value": "https://ride-booking-system-one.vercel.app",
			"type": "default"
		}
	]
}